<?php

/**
 * @file
 * Contains thunder_text_export.module.
 */

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\thunder_text_export\Ajax\CopyToClipboardCommand;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function thunder_text_export_form_node_type_edit_form_alter(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
  $entity_type = $form_object->getEntity();

  $view_modes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle($entity_type->getEntityType()->getBundleOf(), $entity_type->id());

  $form['thunder_text_export'] = [
    '#type' => 'details',
    '#title' => t('Text export'),
    '#group' => 'additional_settings',
    '#description' => t('Configure the text export for this content type.'),
  ];

  // Create a checkbox to enable/disable the text export.
  $form['thunder_text_export']['thunder_text_export_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable text export'),
    '#default_value' => $entity_type->getThirdPartySetting('thunder_text_export', 'enabled', FALSE),
  ];

  // Create a dropdown list of view modes.
  $form['thunder_text_export']['thunder_text_export_view_mode'] = [
    '#type' => 'select',
    '#options' => $view_modes,
    '#default_value' => $entity_type->getThirdPartySetting('thunder_text_export', 'view_mode', 'default'),
    '#title' => t('View Mode'),
    '#description' => t('Select the view mode to be used for the text export.'),
    '#states' => [
      'visible' => [
        ':input[name="thunder_text_export_enabled"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['#entity_builders'][] = '_thunder_text_export_form_entity_type_form_builder';
}

/**
 * Entity builder for the node type form.
 */
function _thunder_text_export_form_entity_type_form_builder(string $entity_type, ConfigEntityInterface $type, array &$form, FormStateInterface $form_state): void {

  // Save the values from the form into the config entity.
  $type->setThirdPartySetting('thunder_text_export', 'enabled', $form_state->getValue('thunder_text_export_enabled'));
  $type->setThirdPartySetting('thunder_text_export', 'view_mode', $form_state->getValue('thunder_text_export_view_mode'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function thunder_text_export_form_node_form_alter(array &$form, FormStateInterface $form_state): void {

  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  // Check if the node is already saved.
  $entity = $form_object->getEntity();
  if ($entity->isNew()) {
    return;
  }

  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
  $entity_type = \Drupal::entityTypeManager()->getStorage($entity->getEntityType()->getBundleEntityType())->load($entity->bundle());

  // Check if the text export is enabled for this content type.
  if (!$entity_type->getThirdPartySetting('thunder_text_export', 'enabled')) {
    return;
  }

  // Add the custom button to the node form actions.
  $form['actions']['copyToClipboard'] = [
    '#type' => 'submit',
    '#value' => t('Text Export'),
    '#ajax' => [
      'callback' => 'thunder_text_export_button_ajax_callback',
      'progress' => [
        'type' => 'none',
      ],
    ],
  ];

  $form['#attached']['library'][] = "thunder_text_export/copyToClipboard";
}

/**
 * AJAX callback for the clipboard button.
 */
function thunder_text_export_button_ajax_callback(array &$form, FormStateInterface $form_state): AjaxResponse {
  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  $entity = $form_object->getEntity();

  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
  $entity_type = \Drupal::entityTypeManager()->getStorage($entity->getEntityType()->getBundleEntityType())->load($entity->bundle());

  // Get the view mode from the config entity.
  $view_mode = $entity_type->getThirdPartySetting('thunder_text_export', 'view_mode');

  $build = \Drupal::entityTypeManager()
    ->getViewBuilder($entity->getEntityTypeId())
    ->view($entity, $view_mode ?? 'full');

  $output = PlainTextOutput::renderFromHtml((string) \Drupal::service('renderer')->renderPlain($build));

  $response = new AjaxResponse();

  // Use the ClipboardCommand to copy the text to the user's clipboard.
  $response->addCommand(new CopyToClipboardCommand($output));

  return $response;
}
