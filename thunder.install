<?php

/**
 * @file
 * Install, update and uninstall functions for the thunder installation profile.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\update_helper\UpdateLogger;
use Drupal\views\Entity\View;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;

/**
 * Update hook dependencies.
 *
 * Ensure that Thunder updates come last so entity schema updates and more
 * fundamental updates occur first.
 *
 * @return array
 *   Returns list of update hook dependencies.
 */
function thunder_update_dependencies(): array {

  $dependencies = [];
  $dependencies['thunder'] = [];

  // Ensure that all thunder hook_update_N functions are called after all other
  // update hooks.
  $list = [];
  $return = [];
  $updates = update_get_update_list();

  // List of thunder modules with hook_update_N() functions.
  $thunder_module_list = [
    'thunder',
    'thunder_article',
    'thunder_liveblog',
    'thunder_media',
    'thunder_paragraphs',
    'thunder_taxonomy',
    'thunder_translation',
    'thunder_password_policy',
    'thunder_google_analytics',
    'thunder_translation',
    'thunder_workflow',
    'thunder_ivw',
    'thunder_search',
  ];

  foreach ($updates as $module => $info) {
    if (in_array($module, $thunder_module_list, TRUE)) {
      // Build a list of thunder modules with updates to run.
      $return[$module] = [];
    }
    else {
      // Build the list of all the update hooks for thunder updates to depend
      // on.
      $pending = array_keys($info['pending']);
      $list[$module] = array_pop($pending);
    }
  }

  // Add the dependencies to the thunder modules with updates to run.
  foreach ($return as $module => &$info) {
    $info[$updates[$module]['start']] = $list;
  }

  return NestedArray::mergeDeepArray([$return, $dependencies], TRUE);
}

/**
 * Helper function for direct use of update helper checklist service.
 *
 * @param string $update_id
 *   Identifier of update in checklist.
 * @param bool $successful
 *   The success or failure of update.
 *   Used update logger service in update hook.
 */
function _thunder_mark_update_checklist(string $update_id, bool $successful, UpdateLogger $updateLogger): void {
  try {
    /** @var \Drupal\update_helper_checklist\UpdateChecklist $update_checklist */
    $update_checklist = \Drupal::service('update_helper_checklist.update_checklist');

    if ($successful) {
      $update_checklist->markUpdatesSuccessful(['thunder' => [$update_id]]);
    }
    else {
      $update_checklist->markUpdatesFailed(['thunder' => [$update_id]]);
    }
  }
  catch (EntityStorageException $ee) {
    $updateLogger->warning(t('Unable to mark update in checklist.'));
  }
  catch (ServiceNotFoundException $se) {
    // If service is not available, we will just ignore it.
  }
}

/**
 * Implements hook_update_last_removed().
 */
function thunder_update_last_removed(): int {
  return 8309;
}

/**
 * Prepare the content view for the config selector.
 */
function thunder_update_8310(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8310');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Enable bulk editing for media images.
 */
function thunder_update_8311(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8311');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Clean-up bulk operations on content views.
 */
function thunder_update_8312(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8312');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add image name to media type field map.
 */
function thunder_update_8313(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8313');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Disable xsl on sitemap.
 */
function thunder_update_8314(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8314');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Change to the async metatag widget.
 */
function thunder_update_8315(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8315');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Uninstall thunder_liveblog.
 */
function thunder_update_8316(): void {
  $configFactory = \Drupal::configFactory();

  $liveblogNodeConfig = $configFactory->getEditable('field.field.node.liveblog.field_paragraphs');
  if (!$liveblogNodeConfig->isNew()) {
    $liveblogNodeConfig->clear('dependencies.enforced')->save();
  }
  $liveblogStorageConfig = $configFactory->getEditable('field.storage.liveblog_post.field_embed_media');
  if (!$liveblogStorageConfig->isNew()) {
    $liveblogStorageConfig->clear('dependencies.enforced')->save();
  }

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->uninstall(['thunder_liveblog']);
}

/**
 * Remove thunder_article.settings.
 */
function thunder_update_8317(): string {
  \Drupal::configFactory()
    ->getEditable('thunder_article.settings')
    ->delete();

  $view = View::load('scheduler_scheduled_content');
  if ($view) {
    $display =& $view->getDisplay('overview');
    $display['display_options']['menu']['type'] = 'none';
    $view->save();
    return t('The "Scheduled" menu entry was removed.');
  }
  return t('Scheduler view not found.');
}

/**
 * Enable paragraphs quick links.
 */
function thunder_update_8318(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('thunder', 'thunder_update_8318');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Install schema_metatag module.
 */
function thunder_update_8319(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  if (\Drupal::moduleHandler()->moduleExists('metatag') && !\Drupal::moduleHandler()->moduleExists('schema_article')) {
    // Execute configuration update definitions with logging of success.
    $updateHelper->executeUpdate('thunder', 'thunder_update_8319');
  }

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update metatag config.
 */
function thunder_update_8320(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8320');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Use radio input for cardinality 1 in entity browsers.
 */
function thunder_update_8321(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8321');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Add paragraphs and metatag fields to basic page.
 */
function thunder_update_8322(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8322');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Uninstall thunder_google_analytics.
 */
function thunder_update_8323(): void {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->uninstall(['thunder_google_analytics']);
}

/**
 * Replace responsive image style with normal image style.
 */
function thunder_update_8324(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8324');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Allow tiktok video URLs.
 */
function thunder_update_8325(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8325');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Install media_file_delete.
 */
function thunder_update_8326(): void {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->install(['media_file_delete']);
}

/**
 * Allow multiple media types to be shown in entity browser view.
 */
function thunder_update_8327(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('thunder', 'thunder_update_8327');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}
