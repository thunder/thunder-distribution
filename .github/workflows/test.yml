name: Run distribution tests

on:
  pull_request:
    branches:
      - 8.x-[1-9]+.x
      - 6.[0-9]+.x
    paths-ignore:
      - '**.md'

  schedule:
    - cron:  '0 7 * * *'

env:
  DRUPAL_TESTING_COMPOSER_PROJECT: thunder/thunder-project
  DRUPAL_TESTING_DATABASE_USER: root
  DRUPAL_TESTING_DATABASE_PASSWORD: root
  DRUPAL_TESTING_TEST_DUMP_FILE: db-dump.php
  DRUPAL_TESTING_DATABASE_ENGINE: mysql
  DRUPAL_TESTING_TEST_CODING_STYLES: false
  DRUPAL_TESTING_TEST_PROFILE: thunder
  DRUPAL_TESTING_INSTALLATION_FORM_VALUES: "thunder_module_configure_form.install_modules_thunder_demo=NULL"
  DRUPAL_TESTING_TEST_GROUP: Thunder
  THUNDER_ADMIN_BRANCH: 4.x
  PUSHER_CREDENTIALS: ${{ secrets.PUSHER_CREDENTIALS }}
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}

jobs:

  build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1

      - uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: '7.4'
          extensions: Imagick

      - name: Start MySql service
        run: |
          sudo /etc/init.d/mysql start

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-cache-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-cache-

      - name: Get build environment
        run: |
          composer global require thunder/drupal-testing

      - name: Prepare the build
        run: test-drupal-project prepare_build

      - name: Add needed dependencies
        run: composer require "drupal/nexx_integration:^3.4" "valiton/harbourmaster:~8.1" --no-update --no-progress --working-dir=/tmp/test/thunder/install

      - name: Set composer bin path
        run: composer config bin-dir bin/ --working-dir=/tmp/test/thunder/install

      - name: Build the docroot
        run: test-drupal-project build

      - name: Get custom thunder_admin branch
        run: |
          rm -rf thunder_admin
          git clone --depth 1 --single-branch --branch "${THUNDER_ADMIN_BRANCH}" https://github.com/BurdaMagazinOrg/theme-thunder-admin.git thunder_admin
        working-directory: /tmp/test/thunder/install/docroot/themes/contrib

      - name: Install drupal
        run: test-drupal-project install

      - name: Zip build
        run: cd /tmp/test; tar cfz build.tgz thunder; mv build.tgz ${GITHUB_WORKSPACE}

      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build.tgz

  test-max:
    needs: build

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1

    - uses: shivammathur/setup-php@v2
      with:
        coverage: none
        php-version: '7.4'
        extensions: Imagick
        # Turn off pcre.jit until https://www.drupal.org/project/drupal/issues/3181644 is solved.
        ini-values: pcre.jit=0

    - name: Setup problem matchers for PHP
      run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

    - name: Setup problem matchers for PHPUnit
      run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    - name: Start MySql service
      run: |
        sudo /etc/init.d/mysql start

    - name: Get build environment
      run: composer global require thunder/drupal-testing

    - name: Download build
      uses: actions/download-artifact@v1
      with:
        name: build

    - name: Unzip build artifact
      run: mkdir -p /tmp/test; tar xCfz /tmp/test build/build.tgz thunder; rm -rf build

    - name: Run config tests
      run: test-drupal-project run_tests -nc
      env:
        DRUPAL_TESTING_TEST_GROUP: ThunderConfig

    - name: Run installer tests
      run: test-drupal-project run_tests -nc
      env:
        DRUPAL_TESTING_TEST_GROUP: ThunderInstaller

    - name: Run tests suite
      run: test-drupal-project run_tests

  test-upgrade:

    runs-on: ubuntu-20.04

    if: ${{ contains(github.event.pull_request.labels.*.name, 'test-upgrade') || github.event_name == 'schedule' }}

    env:
      DRUPAL_TESTING_TEST_DEPRECATION: false
      DRUPAL_TESTING_COMPOSER_PROJECT_VERSION: 3.0.8

    steps:
      - uses: actions/checkout@v1

      - uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: '7.3'
          extensions: Imagick
          tools: composer:v1

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Start MySql service
        run: sudo /etc/init.d/mysql start

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-cache-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-cache-

      - name: Get build environment
        run: composer global require thunder/drupal-testing

      - name: Prepare the build
        run: test-drupal-project prepare_build

      - name: Use Thunder 3.4 lockfile
        run: |
          touch /tmp/test/thunder/finished-stages/build
          cp ${GITHUB_WORKSPACE}/tests/fixtures/thunder3-4.composer.lock composer.lock
          composer install
        working-directory: /tmp/test/thunder/install

      - name: Install drupal
        run: test-drupal-project install

      - name: Update the docroot
        run: |
          composer require thunder/thunder-distribution:^3.5.0 --no-update
          chmod -R +w docroot/sites/default
          composer update
          vendor/bin/drush updb -y

          vendor/bin/drush pmu libraries -y

          composer remove thunder/thunder-distribution

          composer config name "drupal-testing-thunder/thunder-distribution" --working-dir="${GITHUB_WORKSPACE}"
          composer require "drupal-testing-thunder/thunder-distribution:*" --no-update

          chmod -R +w docroot/sites/default
          composer update
          vendor/bin/drush updb -y

          cd docroot
          php core/scripts/db-tools.php dump-database-d8-mysql > db-dump.php
        working-directory: /tmp/test/thunder/install

      - name: Run tests suite
        run: test-drupal-project run_tests

  test-min:

    runs-on: ubuntu-20.04

    if: ${{ contains(github.event.pull_request.labels.*.name, 'test-min') || github.event_name == 'schedule' }}

    env:
      DRUPAL_TESTING_DRUPAL_VERSION: '~9.0.0'
      DRUPAL_TESTING_TEST_DEPRECATION: false

    steps:
      - uses: actions/checkout@v1

      - uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: '7.3'
          extensions: Imagick

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Start MySql service
        run: |
          sudo /etc/init.d/mysql start

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-cache-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-cache-

      - name: Get build environment
        run: |
          composer self-update
          composer global require thunder/drupal-testing

      - name: Prepare the build
        run: test-drupal-project prepare_build

      - name: Install suggested dependencies
        run: composer require "consolidation/robo:^2.0" "drupal/nexx_integration:^3.4" "valiton/harbourmaster:~8.1" --no-update --no-progress --working-dir=/tmp/test/thunder/install

      - name: Build the docroot
        run: test-drupal-project build
        env:
          DRUPAL_TESTING_MIN_BUILD: true

      - name: Test for deprecations
        run: test-drupal-project deprecation
        continue-on-error: true

      - name: Run the tests
        run: test-drupal-project run_tests

  test-performance:
    needs: [build, test-max]

    runs-on: ubuntu-20.04

    if: ${{ contains(github.event.pull_request.labels.*.name, 'test-performance') || github.event_name == 'schedule' }}

    steps:
      - uses: actions/checkout@v1
        with:
          repository: thunder/docker-thunder-performance
          path: thunder-distribution/docker-thunder-performance
          ref: 'master'

      - uses: shivammathur/setup-php@master
        with:
          coverage: none
          php-version: '7.4'
          extensions: Imagick

      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build

      - name: Unzip build artifact
        run: mkdir -p /tmp/test; tar xCfz /tmp/test build/build.tgz thunder; rm -rf build; mv /tmp/test/thunder/install ${GITHUB_WORKSPACE}/docker-thunder-performance/www

      - name: Set variables
        id: vars
        # GITHUB_HEAD_REF is only defined in PRs. GITHUB_REF is on the default branch something like refs/heads/8.x-4.x.
        # So if GITHUB_HEAD_REF is not defined we use GITHUB_REF and remove leading refs/heads/. On the result / will replaced by _
        run: |
          echo ::set-output name=DOCKER_SANITIZED_BRANCH_NAME::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed 's/\//_/g')
          echo ::set-output name=DOCKER_TAG::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed 's/\//_/g')-${{ github.run_id }}

      - name: Create image and push to registry
        working-directory: docker-thunder-performance
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login -u thundertechnology --password-stdin
          export DOCKER_IMAGE_TAG="burda/thunder-performance:${{ steps.vars.outputs.DOCKER_TAG }}"
          composer config bin-dir vendor/bin/ --working-dir=./www
          chmod u+w www/docroot/sites/default
          bash -x ./build.sh --tag "${DOCKER_IMAGE_TAG}"
          docker push "${DOCKER_IMAGE_TAG}"

      - name: Start Thunder performance testing task for created image
        run: |
          API_CALL_HTTP_CODE=$(curl \
          --request POST \
          --insecure \
          "https://${{ secrets.THUNDER_PTM_HOST }}:3000/warmers" \
          --header "Authorization: Bearer ${{ secrets.THUNDER_PTM_TOKEN }}" \
          --header "Content-Type: application/json" \
          --data "{\"branchTag\":\"${{ steps.vars.outputs.DOCKER_SANITIZED_BRANCH_NAME }}\",\"imageTag\":\"${{ steps.vars.outputs.DOCKER_TAG }}\",\"composeType\":\"default\"}" \
          --output /dev/stderr \
          --write-out "%{http_code}" \
          )

          if [[ "${API_CALL_HTTP_CODE}" != "200" ]]; then
            exit 1
          fi

#   Start a debug session.
#   - name: Setup tmate session
#     uses: mxschmitt/action-tmate@v3
