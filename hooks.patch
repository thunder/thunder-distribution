diff --git a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderMediaSchemaExtension.php b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderMediaSchemaExtension.php
index 0f02b815..a461f0a9 100644
--- a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderMediaSchemaExtension.php
+++ b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderMediaSchemaExtension.php
@@ -156,6 +156,17 @@ protected function resolveFields(): void {
    * @throws \Exception
    */
   protected function resolveMediaTypes($value, ResolveContext $context, ResolveInfo $info): string {
+    $type = NULL;
+    \Drupal::moduleHandler()->invokeAllWith('thunder_gqls_type_resolver', function (callable $hook) use ($value, $context, $info, &$type) {
+      // Once an implementation has returned a value do not call any other
+      // implementation.
+      if ($type === NULL) {
+        $type = $hook('Media', $value, $context, $info);
+      }
+    });
+    if ($type !== NULL) {
+      return $type;
+    }
     if ($value instanceof MediaInterface) {
       return 'Media' . $this->mapBundleToSchemaName($value->bundle());
     }
diff --git a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderPagesSchemaExtension.php b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderPagesSchemaExtension.php
index 856af0e5..ae760a91 100644
--- a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderPagesSchemaExtension.php
+++ b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderPagesSchemaExtension.php
@@ -206,7 +206,18 @@ protected function resolveFields(): void {
    *
    * @throws \Exception
    */
-  protected function resolvePageTypes($value, ResolveContext $context, ResolveInfo $info): string {
+  protected function resolvePageTypes(mixed $value, ResolveContext $context, ResolveInfo $info): string {
+    $type = NULL;
+    \Drupal::moduleHandler()->invokeAllWith('thunder_gqls_type_resolver', function (callable $hook) use ($value, $context, $info, &$type) {
+      // Once an implementation has returned a value do not call any other
+      // implementation.
+      if ($type === NULL) {
+        $type = $hook('Page', $value, $context, $info);
+      }
+    });
+    if ($type !== NULL) {
+      return $type;
+    }
     if ($value instanceof NodeInterface || $value instanceof TermInterface || $value instanceof UserInterface) {
       if ($value->bundle() === 'page') {
         return 'BasicPage';
diff --git a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderParagraphsSchemaExtension.php b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderParagraphsSchemaExtension.php
index ec664d9c..dbba0f91 100644
--- a/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderParagraphsSchemaExtension.php
+++ b/modules/thunder_gqls/src/Plugin/GraphQL/SchemaExtension/ThunderParagraphsSchemaExtension.php
@@ -144,7 +144,18 @@ protected function resolveFields(): void {
    *
    * @throws \Exception
    */
-  protected function resolveParagraphTypes($value, ResolveContext $context, ResolveInfo $info): string {
+  protected function resolveParagraphTypes(mixed $value, ResolveContext $context, ResolveInfo $info): string {
+    $type = NULL;
+    \Drupal::moduleHandler()->invokeAllWith('thunder_gqls_type_resolver', function (callable $hook) use ($value, $context, $info, &$type) {
+      // Once an implementation has returned a value do not call any other
+      // implementation.
+      if ($type === NULL) {
+        $type = $hook('Paragraph', $value, $context, $info);
+      }
+    });
+    if ($type !== NULL) {
+      return $type;
+    }
     if ($value instanceof ParagraphInterface) {
       return 'Paragraph' . $this->mapBundleToSchemaName($value->bundle());
     }
diff --git a/modules/thunder_gqls/thunder_gqls.api.php b/modules/thunder_gqls/thunder_gqls.api.php
new file mode 100644
index 00000000..e75205da
--- /dev/null
+++ b/modules/thunder_gqls/thunder_gqls.api.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * @file
+ * Describes hooks provided by the Thunder GraphQL schema module.
+ */
+
+use Drupal\media\MediaInterface;
+
+/**
+ * Overrides the type resolver.
+ *
+ * This hook can be used to override the type resolver. By default, the
+ * type is determined by the bundle of the entity.
+ *
+ * @param string $interface
+ *  The interface to resolve for. Could be Page, Media or Paragraph
+ * @param mixed $value
+ *  The value to resolve. This is usually an entity of some sort.
+ * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+ *   The resolve context.
+ * @param \GraphQL\Type\Definition\ResolveInfo $info
+ *   The resolve information.
+ *
+ * @return string|null
+ *   The resolved type. Return NULL to leave default implementation
+ *   or be determined by another implementation. First hook to return a value
+ *   wins.
+ */
+function hook_thunder_gqls_type_resolver(string $interface, mixed $value, \Drupal\graphql\GraphQL\Execution\ResolveContext $context, \GraphQL\Type\Definition\ResolveInfo $info): ?string {
+  if ($interface !== 'Page') {
+    return NULL;
+  }
+  if (!$value instanceof \Drupal\node\NodeInterface) {
+    return NULL;
+  }
+  // Bundle of type page can not resolve to the interface name. We need to
+  // return something else.
+  if ($value->bundle() === 'page') {
+    return 'BasicPage';
+  }
+  return NULL;
+}
